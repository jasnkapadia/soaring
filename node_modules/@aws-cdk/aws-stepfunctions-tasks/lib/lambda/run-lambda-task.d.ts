import * as lambda from '@aws-cdk/aws-lambda';
import * as sfn from '@aws-cdk/aws-stepfunctions';
/**
 * (deprecated) Properties for RunLambdaTask.
 *
 * @deprecated Use `LambdaInvoke`
 */
export interface RunLambdaTaskProps {
    /**
     * (deprecated) The JSON that you want to provide to your Lambda function as input.
     *
     * @default - The state input (JSON path '$')
     * @deprecated
     */
    readonly payload?: sfn.TaskInput;
    /**
     * (deprecated) The service integration pattern indicates different ways to invoke Lambda function.
     *
     * The valid value for Lambda is either FIRE_AND_FORGET or WAIT_FOR_TASK_TOKEN,
     * it determines whether to pause the workflow until a task token is returned.
     *
     * If this is set to WAIT_FOR_TASK_TOKEN, the JsonPath.taskToken value must be included
     * somewhere in the payload and the Lambda must call
     * `SendTaskSuccess/SendTaskFailure` using that token.
     *
     * @default FIRE_AND_FORGET
     * @deprecated
     */
    readonly integrationPattern?: sfn.ServiceIntegrationPattern;
    /**
     * (deprecated) Invocation type of the Lambda function.
     *
     * @default RequestResponse
     * @deprecated
     */
    readonly invocationType?: InvocationType;
    /**
     * (deprecated) Client context to pass to the function.
     *
     * @default - No context
     * @deprecated
     */
    readonly clientContext?: string;
    /**
     * (deprecated) Version or alias of the function to be invoked.
     *
     * @default - No qualifier
     * @deprecated
     */
    readonly qualifier?: string;
}
/**
 * (deprecated) Invoke a Lambda function as a Task.
 *
 * OUTPUT: the output of this task is either the return value of Lambda's
 * Invoke call, or whatever the Lambda Function posted back using
 * `SendTaskSuccess/SendTaskFailure` in `waitForTaskToken` mode.
 *
 * @see https://docs.aws.amazon.com/step-functions/latest/dg/connect-lambda.html
 * @deprecated Use `LambdaInvoke`
 */
export declare class RunLambdaTask implements sfn.IStepFunctionsTask {
    private readonly lambdaFunction;
    private readonly props;
    private readonly integrationPattern;
    /**
     * @deprecated
     */
    constructor(lambdaFunction: lambda.IFunction, props?: RunLambdaTaskProps);
    /**
     * (deprecated) Called when the task object is used in a workflow.
     *
     * @deprecated
     */
    bind(_task: sfn.Task): sfn.StepFunctionsTaskConfig;
}
/**
 * Invocation type of a Lambda.
 *
 * @stability stable
 */
export declare enum InvocationType {
    /**
     * Invoke synchronously.
     *
     * The API response includes the function response and additional data.
     *
     * @stability stable
     */
    REQUEST_RESPONSE = "RequestResponse",
    /**
     * Invoke asynchronously.
     *
     * Send events that fail multiple times to the function's dead-letter queue (if it's configured).
     * The API response only includes a status code.
     *
     * @stability stable
     */
    EVENT = "Event",
    /**
     * TValidate parameter values and verify that the user or role has permission to invoke the function.
     *
     * @stability stable
     */
    DRY_RUN = "DryRun"
}
